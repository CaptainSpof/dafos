{
  lib,
  config,
  namespace,
  pkgs,
  ...
}:

let
  inherit (lib) mkEnableOption mkIf types;
  inherit (lib.${namespace}) mkOpt;

  cfg = config.${namespace}.services.immich-frame;
in
{

  options.${namespace}.services.immich-frame = {
    enable = mkEnableOption "Whether or not to configure immich-frame.";
    base-url = mkOpt types.str "https://photos.daftdaf.dev" "The base url";
  };

  config = mkIf cfg.enable {
    # Containers
    virtualisation.oci-containers.containers."immichframe" = {
      image = "ghcr.io/immichframe/immichframe:latest";
      environment = {
        "ApiKey" = ""; # NOCOMMIT
        "ImmichServerUrl" = cfg.base-url;
        "TZ" = "Europe/Paris";
      };
      ports = [
        "8080:8080/tcp"
      ];
      log-driver = "journald";
      extraOptions = [
        "--network-alias=immichframe"
        "--network=immichframe_default"
      ];
    };

    systemd.services."podman-immichframe" = {
      serviceConfig = {
        Restart = lib.mkOverride 90 "on-failure";
      };
      after = [
        "podman-network-immichframe_default.service"
      ];
      requires = [
        "podman-network-immichframe_default.service"
      ];
      partOf = [
        "podman-compose-immichframe-root.target"
      ];
      wantedBy = [
        "podman-compose-immichframe-root.target"
      ];
    };

    # Networks
    systemd.services."podman-network-immichframe_default" = {
      path = [ pkgs.podman ];
      serviceConfig = {
        Type = "oneshot";
        RemainAfterExit = true;
        ExecStop = "podman network rm -f immichframe_default";
      };
      script = ''
        podman network inspect immichframe_default || podman network create immichframe_default
      '';
      partOf = [ "podman-compose-immichframe-root.target" ];
      wantedBy = [ "podman-compose-immichframe-root.target" ];
    };

    # Root service
    # When started, this will automatically create all resources and start
    # the containers. When stopped, this will teardown all resources.
    systemd.targets."podman-compose-immichframe-root" = {
      unitConfig = {
        Description = "Root target generated by compose2nix.";
      };
      wantedBy = [ "multi-user.target" ];
    };
  };
}
